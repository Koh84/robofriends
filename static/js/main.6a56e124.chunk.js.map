{"version":3,"sources":["components/Card.js","components/CardList.js","components/ErrorBoundary.js","components/SearchBox.js","components/Scroll.js","constants.js","containers/App.js","actions.js","reportWebVitals.js","reducers.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList","robots","map","user","i","username","ErrorBoundary","props","state","hasError","error","info","this","setState","children","Component","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","React","connect","searchRobots","requestRobots","dispatch","event","text","target","value","payload","fetch","then","response","json","data","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6a56e124.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n    return(\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img src={`https://robohash.org/${id}?200x200`} alt='robots'/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n    return(\r\n        <div>\r\n            {\r\n                robots.map((user, i) => {\r\n                    return (\r\n                    <Card\r\n                         key={i} \r\n                         id={user.id} \r\n                         name={user.name} \r\n                         username={user.username} \r\n                         email={user.email}\r\n                         />\r\n                    );\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({hasError: true});\r\n    }\r\n\r\n    render() {\r\n        if(this.state.hasError) {\r\n            return <h1>Ooops. That is not good.</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n    return(\r\n        <div className='pa2'>\r\n            <input \r\n                className='pa3 ba b--green bg-lightest-blue'\r\n                type='search' \r\n                placeholder='search robots' \r\n                onChange={searchChange}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{ overflowY: 'scroll', border: '1px solid black', height: '800px' }}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\n//this will be a promise, promise will have 3 states\r\n//pending - which is the very first time we send the request, waiting for the promise to return\r\n//success\r\n//fail\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport ErrorBoundary from '../components/ErrorBoundary'\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll'\r\nimport './App.css';\r\n\r\nimport { requestRobots, setSearchField } from '../actions';\r\n\r\n//Tell me what state i need to listen to in the redux store and send to this App as props\r\n//mapStateToProps is use by App, \r\n//so we actually says searchField is equal to the searchField state from the redux store that is\r\n//from searchRobots reducer\r\nconst mapStateToProps = state => {\r\n    return {\r\n        //searchField: state.searchField\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n}\r\n\r\n//Tell me what Dispatch(action) i need to listen to tell the redux store and send to it to the reducer\r\n//mapDispatchToProps is used to send an action object to a reducer\r\n//onSearchChange is a function that you want it to do something\r\n//in this case, we want to dispatch an action to reducer so that reducer aware of it\r\n//an action (setSearchField) is an object that is return from action.js setSearchField\r\n// {\r\n//     type: CHANGE_SEARCH_FIELD, //we use a const variable here instead of string directly as it will throw error if something is wrong, using string directly won't throw error if something is missed spell\r\n//     payload: text\r\n// }\r\n//Then we do dispatch(action object here)\r\n//the task received an event from the SearchBox input html tag which contain the text the user typed\r\nconst mapDispatchToProps = (dispatch) => {\r\n    //we use return here as required by redux to return an object containing our actions\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        //onRequestRobots: () => requestRobots(dispatch)\r\n        //thunkMiddleware is a middleware that wait and see if any action returns a function rather than object\r\n        onRequestRobots: () => dispatch(requestRobots())\r\n    }\r\n}\r\n\r\nclass App extends React.Component {\r\n    componentDidMount() {\r\n        this.props.onRequestRobots();\r\n    }\r\n\r\n    render() {\r\n        //we can now use searchField, onSearchChange as a props taken from redux store\r\n        //as defined in mapStateToProps, mapDispatchToProps\r\n        const { searchField, onSearchChange, robots, isPending } = this.props;\r\n        const filteredRobots = robots.filter( robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n        })\r\n\r\n        return isPending ?\r\n            <h1>Loading...</h1>\r\n        :\r\n        (\r\n            <div className='tc'>\r\n                <h1 className='f1'>RoboFriends</h1>\r\n                <SearchBox searchChange={onSearchChange}/>\r\n                <Scroll>\r\n                    <ErrorBoundary>\r\n                        <CardList robots={filteredRobots}/>\r\n                    </ErrorBoundary>\r\n                </Scroll>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n//connect is a higher order function that takes a function and return a modified function\r\n//connect accepts two parameters, i.e mapStateToProps, mapDispatchToProps\r\n//mapStateToProps, mapDispatchToProps is just a standard naming that redux use\r\n//the following connect function says, subscribes App function to any state changes in the redux store\r\n//so now App will know whenever a state is changed in the redux store\r\n//then, we need to tell App, what states and/or Dispatch(action) we want you to listen to  \r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants'\r\n\r\n//we can use curly bracket to wrap a code statement to avoid typing return\r\n//and the wrap code statement is an object\r\n//as below we are returning an object from setSearchField, this is a redux action,\r\n//this object is what we are going to send to redux reducer\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD, //we use a const variable here instead of string directly as it will throw error if something is wrong, using string directly won't throw error if something is missed spell\r\n    payload: text\r\n})\r\n\r\n//the top function is the same as the below function\r\n\r\n// export const setSearchField = (text) => {\r\n//     console.log(text);\r\n//     return {\r\n//         type: CHANGE_SEARCH_FIELD, //we use a const variable here instead of string directly as it will throw error if something is wrong, using string directly won't throw error if something is missed spell\r\n//         payload: text\r\n//     }\r\n// }\r\n\r\n// export const requestRobots = (dispatch) => {\r\n//     dispatch({type: REQUEST_ROBOTS_PENDING});\r\n//     fetch('https://jsonplaceholder.typicode.com/users')\r\n//         .then(response => response.json())\r\n//         .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n//         .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\r\n// }\r\n\r\n//the top function is the same as the below function\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({type: REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\r\n}","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants'\r\n\r\n// The 3 principles of react redux\r\n// 1. Single source of truth - 1 big object that describes our state\r\n// 2. State is read only - never modify the state object, the only we can do is create a new object and add/update parameter inside\r\n// 3. Changes using pure functions - function that accepts inputs and return an output that don't have side effect.\r\n\r\n//this is the initial state in redux store for Search\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\n//create a reducer here\r\n//this funciton is call searchRobots because this is what it is trying to do\r\n//give a reducer a state and an action, once we received an action, we can then change the state\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n    //we use switch case here because it is easier in the future to add extra \"action.type\" if needed\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            //we create a brand new state here because in react redux, we should not change the current state\r\n            //we can create a new one by copying the current state and add extra information or update a parameter\r\n            return Object.assign({}, state, {searchField: action.payload})\r\n            //we can also use object spread operator\r\n            //return { ...state, {searchfield: action.payload}}\r\n        default:\r\n            return state; //always return a default because we want to implement a pure function\r\n    }\r\n}\r\n\r\n//this is the initial state in redux store for Robots\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, {isPending: true})\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, {robots: action.payload, isPending: false})\r\n        case REQUEST_ROBOTS_FAILED:\r\n                return Object.assign({}, state, {error: action.payload, isPending: false})\r\n        default:\r\n            return state; \r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport { createLogger } from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'tachyons';\r\nimport { searchRobots, requestRobots } from './reducers'\r\n\r\n//middleware for redux to log redux stuff\r\nconst logger = createLogger();\r\n\r\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\r\n//create a redux store\r\n//rootReducer is combination of all reducers we have in our application\r\n//searchRobots is only 1 reducer\r\n//applyMiddleware(logger) to log redux stuff\r\n//thunkMiddleware is a middleware that wait and see if any action returns a function rather than object\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\r\n\r\nReactDOM.render(\r\n  //Provider is used to pass redux store to all react components and containers\r\n  //However, we also have to use redux connect inside the smart component itself to tell which components is actually a smart component that know redux is actually exists and being used\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>, document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}